# vpn_bot_with_cryptobot.py
import sqlite3
import logging
import json
import os
import uuid
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
import requests
from telegram import LabeledPrice
from telegram.ext import PreCheckoutQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
    BOT_TOKEN = os.environ["BOT_TOKEN"]
    ADMIN_ID = int(os.environ["ADMIN_ID"])
    CRYPTO_BOT_TOKEN = os.environ["CRYPTO_BOT_TOKEN"]
    CRYSTAL_PAY_LOGIN = os.environ.get("CRYSTAL_PAY_LOGIN", "")
    CRYSTAL_PAY_SECRET = os.environ.get("CRYSTAL_PAY_SECRET", "")
    STARS_PER_USDT = float(os.environ.get("STARS_PER_USDT", "70"))
    RUB_PER_USDT = float(os.environ.get("RUB_PER_USDT", "100"))  # –∫—É—Ä—Å: —Å–∫–æ–ª—å–∫–æ RUB –∑–∞ 1 USDT
    CHANNEL_ID = os.environ.get("CHANNEL_ID", "@EcliptVPN")  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
except (KeyError, ImportError) as e:
    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ dotenv: {e}")
    logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, ADMIN_ID, CRYPTO_BOT_TOKEN")
    exit(1)

CRYPTO_BOT_API_URL = "https://pay.crypt.bot/api"
CRYSTAL_PAY_API_URL = "https://api.crystalpay.io/v2"

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –≤ –∑–≤—ë–∑–¥–∞—Ö –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
STARS_PRICE_BY_PLAN = {
    1: 50,    # 1 –º–µ—Å—è—Ü
    2: 110,   # 3 –º–µ—Å—è—Ü–∞
    3: 205,   # 6 –º–µ—Å—è—Ü–µ–≤
    4: 285    # 12 –º–µ—Å—è—Ü–µ–≤
}

# –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
COUNTRIES = {
    'de': 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è',
    'ch': 'üá®üá≠ –®–≤–µ–π—Ü–∞—Ä–∏—è',
    'nl': 'üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
    'fi': 'üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è'
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS plans (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                duration INTEGER NOT NULL,
                price REAL NOT NULL,
                description TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS configs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                plan_id INTEGER,
                country TEXT NOT NULL,
                config TEXT NOT NULL,
                is_used BOOLEAN DEFAULT FALSE,
                FOREIGN KEY (plan_id) REFERENCES plans (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT
            )
        ''')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ balance
        cursor.execute("PRAGMA table_info(users)")
        columns = [info[1] for info in cursor.fetchall()]
        if 'balance' not in columns:
            cursor.execute("ALTER TABLE users ADD COLUMN balance REAL DEFAULT 0.0")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü balance –≤ —Ç–∞–±–ª–∏—Ü—É users")
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                plan_id INTEGER,
                config_id INTEGER,
                order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expiry_date TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                FOREIGN KEY (plan_id) REFERENCES plans (id),
                FOREIGN KEY (config_id) REFERENCES configs (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT DEFAULT 'purchase',
                plan_id INTEGER,
                amount REAL,
                invoice_id TEXT UNIQUE,
                cryptobot_invoice_id TEXT,
                crystal_pay_id TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                FOREIGN KEY (plan_id) REFERENCES plans (id)
            )
        ''')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ payments (–º–∏–≥—Ä–∞—Ü–∏–∏)
        cursor.execute("PRAGMA table_info(payments)")
        columns = [info[1] for info in cursor.fetchall()]
        if 'type' not in columns:
            cursor.execute("ALTER TABLE payments ADD COLUMN type TEXT DEFAULT 'purchase'")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü type –≤ —Ç–∞–±–ª–∏—Ü—É payments")
        if 'cryptobot_invoice_id' not in columns:
            cursor.execute("ALTER TABLE payments ADD COLUMN cryptobot_invoice_id TEXT")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü cryptobot_invoice_id –≤ —Ç–∞–±–ª–∏—Ü—É payments")
        if 'crystal_pay_id' not in columns:
            cursor.execute("ALTER TABLE payments ADD COLUMN crystal_pay_id TEXT")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü crystal_pay_id –≤ —Ç–∞–±–ª–∏—Ü—É payments")
        if 'status' not in columns:
            cursor.execute("ALTER TABLE payments ADD COLUMN status TEXT DEFAULT 'pending'")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü status –≤ —Ç–∞–±–ª–∏—Ü—É payments")
        if 'created_at' not in columns:
            cursor.execute("ALTER TABLE payments ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü created_at –≤ —Ç–∞–±–ª–∏—Ü—É payments")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ country –≤ configs
        cursor.execute("PRAGMA table_info(configs)")
        columns = [info[1] for info in cursor.fetchall()]
        if 'country' not in columns:
            cursor.execute("ALTER TABLE configs ADD COLUMN country TEXT NOT NULL DEFAULT 'de'")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü country –≤ —Ç–∞–±–ª–∏—Ü—É configs")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã)
        cursor.execute("DELETE FROM plans")  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞—Ä–∏—Ñ—ã
        plans = [
            (1, "1 –º–µ—Å—è—Ü", 1, 1.0, "VPN –Ω–∞ 1 –º–µ—Å—è—Ü"),
            (2, "3 –º–µ—Å—è—Ü–∞", 3, 2.5, "VPN –Ω–∞ 3 –º–µ—Å—è—Ü–∞"),
            (3, "6 –º–µ—Å—è—Ü–µ–≤", 6, 4.0, "VPN –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤"),
            (4, "12 –º–µ—Å—è—Ü–µ–≤", 12, 5.0, "VPN –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤")
        ]
        cursor.executemany("INSERT INTO plans VALUES (?, ?, ?, ?, ?)", plans)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS promo_codes (
                code TEXT PRIMARY KEY,
                amount REAL NOT NULL,
                max_activations INTEGER,
                used_activations INTEGER DEFAULT 0,
                expires_at TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS promo_activations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT NOT NULL,
                user_id INTEGER NOT NULL,
                activated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (code) REFERENCES promo_codes (code),
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        exit(1)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_balance(user_id):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0.0

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
def update_balance(user_id, amount):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE users SET balance = balance + ? WHERE user_id = ?
    """, (amount, user_id))
    conn.commit()
    conn.close()

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RUB->USDT
def rub_to_usdt(rub_amount):
    try:
        return round(float(rub_amount) / RUB_PER_USDT, 2)
    except Exception:
        return 0.0

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ –ë–î
def get_plans():
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM plans ORDER BY duration")
    plans = cursor.fetchall()
    conn.close()
    return plans

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ ID
def get_plan_by_id(plan_id):
    plans = get_plans()
    return next((p for p in plans if p[0] == plan_id), None)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ –∏ —Å—Ç—Ä–∞–Ω—ã
def get_unused_config(plan_id, country):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, config FROM configs 
        WHERE plan_id = ? AND country = ? AND is_used = FALSE 
        LIMIT 1
    """, (plan_id, country))
    config = cursor.fetchone()
    conn.close()
    return config

# –ü–æ–º–µ—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
def mark_config_as_used(config_id):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE configs SET is_used = TRUE WHERE id = ?", (config_id,))
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(user):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, balance)
        VALUES (?, ?, ?, ?, COALESCE((SELECT balance FROM users WHERE user_id = ?), 0.0))
    """, (user.id, user.username, user.first_name, user.last_name, user.id))
    conn.commit()
    conn.close()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: user_id={user.id}, username={user.username}")
    
# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
def create_order(user_id, plan_id, config_id, duration):
    expiry_date = datetime.now() + timedelta(days=duration * 30)
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO orders (user_id, plan_id, config_id, expiry_date)
        VALUES (?, ?, ?, ?)
    """, (user_id, plan_id, config_id, expiry_date))
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return order_id

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_orders(user_id):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT o.id, p.name, o.order_date, o.expiry_date, c.config, c.country
        FROM orders o
        JOIN plans p ON o.plan_id = p.id
        LEFT JOIN configs c ON o.config_id = c.id
        WHERE o.user_id = ? AND o.expiry_date > CURRENT_TIMESTAMP
        ORDER BY o.order_date DESC
    """, (user_id,))
    orders = cursor.fetchall()
    conn.close()
    return orders

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
def get_configs_stats():
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT p.name, c.country, COUNT(*) as count
        FROM configs c
        JOIN plans p ON c.plan_id = p.id
        WHERE c.is_used = FALSE
        GROUP BY p.id, c.country
    """)
    stats = cursor.fetchall()
    conn.close()
    return stats

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
def create_payment(user_id, payment_type, plan_id, amount):
    invoice_id = str(uuid.uuid4())
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO payments (user_id, type, plan_id, invoice_id, amount)
        VALUES (?, ?, ?, ?, ?)
    """, (user_id, payment_type, plan_id, invoice_id, amount))
    conn.commit()
    conn.close()
    logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç—ë–∂: user_id={user_id}, type={payment_type}, plan_id={plan_id}, amount={amount}, invoice_id={invoice_id}")
    return invoice_id

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cryptobot_invoice_id
def update_cryptobot_invoice_id(internal_invoice_id, cb_invoice_id):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE payments SET cryptobot_invoice_id = ? WHERE invoice_id = ?
    """, (cb_invoice_id, internal_invoice_id))
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ crystal_pay_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_crystal_pay_id(internal_invoice_id, crystal_id):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE payments SET crystal_pay_id = ? WHERE invoice_id = ?
    """, (crystal_id, internal_invoice_id))
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
def update_payment_status(invoice_id, status):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE payments SET status = ? WHERE invoice_id = ?
    """, (status, invoice_id))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
def get_payment(internal_invoice_id):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT p.id, p.user_id, p.type, p.plan_id, p.amount, p.invoice_id, p.cryptobot_invoice_id, p.crystal_pay_id, p.status, p.created_at, pl.name as plan_name 
        FROM payments p
        LEFT JOIN plans pl ON p.plan_id = pl.id
        WHERE p.invoice_id = ?
    """, (internal_invoice_id,))
    payment = cursor.fetchone()
    conn.close()
    if payment:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç—ë–∂: invoice_id={internal_invoice_id}, type={payment[2]}, status={payment[8]}")
    else:
        logger.warning(f"–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: invoice_id={internal_invoice_id}")
    return payment

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ CryptoBot
def create_cryptobot_invoice(user_id, amount, description, payload):
    data = {
        "amount": str(amount),
        "asset": "USDT",  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ USDT
        "description": description,
        "payload": payload,
        "paid_btn_name": "viewItem",
        "paid_btn_url": f"https://t.me/{BOT_TOKEN.split(':')[0]}?start=menu"
    }
    
    try:
        logger.info(f"Sending request to CryptoBot API: {data}")
        url = f"{CRYPTO_BOT_API_URL}/createInvoice"
        headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
        response = requests.post(url, headers=headers, data=data, timeout=10)
        logger.info(f"CryptoBot response: {response.status_code} - {response.text}")
        if response.status_code == 200:
            result = response.json()
            if result.get("ok"):
                return result["result"]
            logger.error(f"CryptoBot API error: {result}")
            return None
        logger.error(f"HTTP error: {response.status_code} - {response.text}")
        return None
    except Exception as e:
        logger.error(f"Error creating CryptoBot invoice: {e}")
        return None
        
# alias, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã –Ω–µ –ø–∞–¥–∞–ª–∏
def create_crypto_invoice(user_id, amount, description, payload=None):
    return create_cryptobot_invoice(user_id, amount, description, payload)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ CrystalPAY
def create_crystal_pay_invoice(user_id, amount, description, callback_url=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ CrystalPAY (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π JSON-–Ω–∞–±–æ—Ä –ø–æ–ª–µ–π)"""
    url = f"{CRYSTAL_PAY_API_URL}/invoice/create/"

    invoice_id = str(uuid.uuid4())

    payload = {
        "auth_login": CRYSTAL_PAY_LOGIN,
        "auth_secret": CRYSTAL_PAY_SECRET,
        "type": "purchase",
        "amount": int(round(float(amount))),
        "extra": invoice_id,
        "lifetime": 300
    }
    # callback_url –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º —Ç–∞—Ä–∏—Ñ–æ–º
    if callback_url:
        payload["callback_url"] = callback_url

    try:
        headers = {"Content-Type": "application/json"}
        logger.info("Sending request to CrystalPAY API (json)")
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        logger.info(f"CrystalPAY response: {response.status_code} - {response.text}")

        if response.status_code == 200:
            result = response.json()
            if not result.get("error"):
                return {
                    "invoice_id": invoice_id,
                    "crystal_id": result.get("id"),
                    "url": result.get("url")
                }
            else:
                logger.error(f"CrystalPAY API error body: {result}")
                return {"error": True, "errors": result.get("errors", [])}
        else:
            logger.error(f"HTTP error: {response.status_code} - {response.text}")
            return {"error": True, "errors": [f"HTTP {response.status_code}"]}
    except Exception as e:
        logger.error(f"Error creating CrystalPAY invoice: {e}")
        return {"error": True, "errors": [str(e)]}

def create_crystal_pay_invoice_rub(user_id, rub_amount, description, internal_invoice_id, callback_url=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ –≤ CrystalPAY –≤ RUB (type=purchase, amount –≤ RUB)."""
    url = f"{CRYSTAL_PAY_API_URL}/invoice/create/"

    payload = {
        "auth_login": CRYSTAL_PAY_LOGIN,
        "auth_secret": CRYSTAL_PAY_SECRET,
        "type": "purchase",
        "amount": int(rub_amount),  # –≤ —Ä—É–±–ª—è—Ö
        "extra": internal_invoice_id,
        "lifetime": 300
    }
    if callback_url:
        payload["callback_url"] = callback_url

    try:
        headers = {"Content-Type": "application/json"}
        logger.info("Sending request to CrystalPAY API (json, RUB)")
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        logger.info(f"CrystalPAY RUB response: {response.status_code} - {response.text}")
        if response.status_code == 200:
            result = response.json()
            if not result.get("error"):
                return {
                    "crystal_id": result.get("id"),
                    "url": result.get("url")
                }
            else:
                logger.error(f"CrystalPAY RUB API error body: {result}")
                return {"error": True, "errors": result.get("errors", [])}
        else:
            logger.error(f"HTTP error (RUB): {response.status_code} - {response.text}")
            return {"error": True, "errors": [f"HTTP {response.status_code}"]}
    except Exception as e:
        logger.error(f"Error creating CrystalPAY RUB invoice: {e}")
        return {"error": True, "errors": [str(e)]}

def check_crystal_pay_payment(crystal_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ CrystalPAY (–∏—Å–ø–æ–ª—å–∑—É–µ–º JSON)."""
    url = f"{CRYSTAL_PAY_API_URL}/invoice/info/"

    data = {
        "auth_login": CRYSTAL_PAY_LOGIN,
        "auth_secret": CRYSTAL_PAY_SECRET,
        "id": crystal_id
    }

    try:
        headers = {"Content-Type": "application/json"}
        response = requests.post(url, headers=headers, json=data, timeout=10)
        logger.info(f"CrystalPAY check response: {response.status_code} - {response.text}")
        if response.status_code == 200:
            result = response.json()
            if not result.get("error"):
                return result.get("state", "notpayed")
            else:
                logger.error(f"CrystalPAY check error body: {result}")
                return "error"
        else:
            logger.error(f"HTTP error checking CrystalPAY payment: {response.status_code} - {response.text}")
            return "error"
    except Exception as e:
        logger.error(f"Error checking CrystalPAY payment: {e}")
        return "error"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu(is_admin=False):
    keyboard = [
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üõçÔ∏è –ö—É–ø–∏—Ç—å VPN", callback_data="plans")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    if is_admin:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω", callback_data="admin")])
    # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–Ω–æ–ø–æ–∫ —Å —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnicodeEncodeError –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Å–æ–ª—è—Ö
    logger.info(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è is_admin={is_admin}")
    return InlineKeyboardMarkup(keyboard)
    
# –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—å
def get_profile_menu():
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup")],
        [InlineKeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")],
        [InlineKeyboardButton("üßæ –ú–æ–∏ VPN", callback_data="orders")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω
def get_countries_keyboard(back_callback):
    keyboard = []
    for code, name in COUNTRIES.items():
        keyboard.append([InlineKeyboardButton(name, callback_data=f"country_{code}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)])
    return InlineKeyboardMarkup(keyboard)

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
def get_admin_panel():
    keyboard = [
        [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_upload")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîç –ö–æ–Ω—Ñ–∏–≥–∏", callback_data="admin_configs")],
        [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos")],
        [InlineKeyboardButton("üí∏ –í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_grant_balance")],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üí∞ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments")],
        [InlineKeyboardButton("üîô –í—ã—Ö–æ–¥", callback_data="menu")]
    ]
    logger.info(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {keyboard}")
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        save_user(user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
        if user.id != ADMIN_ID:
            is_subscribed = await check_channel_subscription(context.bot, user.id)
            if not is_subscribed:
                text, keyboard = get_subscription_required_menu()
                await update.message.reply_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
                context.user_data['state'] = 'subscription_required'
                return
        
        welcome_text = (
            "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EcliptVPN!*\n\n"
            "üîê –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω.\n"
            "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç 1$ –∏ –ø–æ–∫—É–ø–∞–π—Ç–µ —Ç–∞—Ä–∏—Ñ—ã.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await update.message.reply_text(welcome_text, reply_markup=get_main_menu(user.id == ADMIN_ID), parse_mode=ParseMode.MARKDOWN)
        context.user_data['state'] = 'menu'
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown."""
    if text is None:
        return ""
    escape_chars = r'_[]*()~`>#-+={}|.!='
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

async def check_channel_subscription(bot, user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def get_subscription_required_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    text = """üîí *–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω*

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:

üì¢ [EcliptVPN](https://t.me/EcliptVPN)

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.

üìã [–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://teletype.in/@ecliptvpn/Zw_fLfMQHWb)
üìã [–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è](https://teletype.in/@ecliptvpn/Zw_fLfMQHWb)"""

    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/EcliptVPN")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ]
    
    return text, InlineKeyboardMarkup(keyboard)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    
    logger.info(f"Callback data: {data}, user_id: {user_id}, state: {context.user_data.get('state')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞ –∏ —Å–∞–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏)
    if user_id != ADMIN_ID and data != "check_subscription":
        is_subscribed = await check_channel_subscription(context.bot, user_id)
        if not is_subscribed:
            text, keyboard = get_subscription_required_menu()
            await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'subscription_required'
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if data == "check_subscription":
        if user_id == ADMIN_ID:
            # –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
            welcome_text = (
                "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EcliptVPN!*\n\n"
                "üîê –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω.\n"
                "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç 1$ –∏ –ø–æ–∫—É–ø–∞–π—Ç–µ —Ç–∞—Ä–∏—Ñ—ã.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            await query.edit_message_text(welcome_text, reply_markup=get_main_menu(True), parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'menu'
        else:
            is_subscribed = await check_channel_subscription(context.bot, user_id)
            if is_subscribed:
                welcome_text = (
                    "‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
                    "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EcliptVPN!*\n\n"
                    "üîê –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω.\n"
                    "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç 1$ –∏ –ø–æ–∫—É–ø–∞–π—Ç–µ —Ç–∞—Ä–∏—Ñ—ã.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
                await query.edit_message_text(welcome_text, reply_markup=get_main_menu(False), parse_mode=ParseMode.MARKDOWN)
                context.user_data['state'] = 'menu'
            else:
                text, keyboard = get_subscription_required_menu()
                await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return
    
    if data == "menu":
        context.user_data['state'] = 'menu'
        menu_text = "üåü *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*"
        reply_markup = get_main_menu(user_id == ADMIN_ID)
        try:
            await query.edit_message_text(menu_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –¥–ª—è user_id {user_id}: {e}")
            await query.message.reply_text(menu_text.replace("*", ""), reply_markup=reply_markup)
            await context.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –¥–ª—è user_id {user_id}: {e}")
        return
    
    if data == "admin":
        if user_id != ADMIN_ID:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç user_id {user_id} (–Ω–µ –∞–¥–º–∏–Ω)")
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        admin_text = "üîß *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*"
        reply_markup = get_admin_panel()
        try:
            await query.edit_message_text(admin_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è user_id {user_id}: {e}")
            await query.message.reply_text(admin_text.replace("*", ""), reply_markup=reply_markup)
            await context.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è user_id {user_id}: {e}")
        context.user_data['state'] = 'admin_menu'
        return
    
    if data == "profile":
        balance = get_balance(user_id)
        username = escape_markdown(query.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω')
        first_name = escape_markdown(query.from_user.first_name)
        balance_str = escape_markdown(f"{balance:.2f}")
        profile_text = (
            f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"üÜî ID: `{user_id}`\n"
            f"üëª –ò–º—è: {first_name}\n"
            f"üìõ Username: @{username}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: *{balance_str} USDT*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        reply_markup = get_profile_menu()
        try:
            await query.edit_message_text(profile_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown
            profile_text_safe = (
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
                f"üÜî ID: {user_id}\n"
                f"üëª –ò–º—è: {query.from_user.first_name}\n"
                f"üìõ Username: @{query.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            await query.message.reply_text(profile_text_safe, reply_markup=reply_markup)
        return
    
    if data == "plans":
        await show_plans(update, context)
        return
    
    if data == "orders":
        orders = get_user_orders(user_id)
        if not orders:
            orders_text = "üìã *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–ø–æ–¥–ø–∏—Å–æ–∫.*"
        else:
            orders_text = "üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ VPN:*\n\n"
            for order in orders:
                country_emoji = COUNTRIES.get(order[5], 'üåç')
                config_escaped = escape_markdown(order[4])
                orders_text += (
                    f"üÜî –ó–∞–∫–∞–∑ #{order[0]}\n"
                    f"üì¶ {order[1]} | {country_emoji}\n"
                    f"üìÖ –°: {order[2][:10]}\n"
                    f"‚è∞ –î–æ: {order[3][:10]}\n"
                    f"üîë –ö–æ–Ω—Ñ–∏–≥: `{config_escaped}`\n\n"
                )
        keyboard = [[InlineKeyboardButton("üîô –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await query.edit_message_text(orders_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è user_id {user_id}: {e}")
            await query.message.reply_text(orders_text.replace("*", ""), reply_markup=reply_markup)
        return

    if data == "topup":
        keyboard = [
            [InlineKeyboardButton("‚ÇΩ 50", callback_data="topup_rub_amount_50")],
            [InlineKeyboardButton("‚ÇΩ 100", callback_data="topup_rub_amount_100")],
            [InlineKeyboardButton("‚ÇΩ 250", callback_data="topup_rub_amount_250")],
            [InlineKeyboardButton("‚ÇΩ 400", callback_data="topup_rub_amount_400")],
            [InlineKeyboardButton("‚ÇΩ 500", callback_data="topup_rub_amount_500")],
            [InlineKeyboardButton("‚úçÔ∏è –î—Ä—É–≥–∞—è —Å—É–º–º–∞ (‚ÇΩ)", callback_data="topup_rub_custom")],
            [InlineKeyboardButton("üîô –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (RUB):", reply_markup=reply_markup)
        return

    if data.startswith("topup_crypto_"):
        parts = data.split("_")
        try:
            amount = float(parts[-1])
        except Exception:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è CryptoBot.")
            return
        # —Å–æ–∑–¥–∞—ë–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞—Ç—ë–∂
        internal_invoice_id = create_payment(user_id, 'topup', None, amount)
        description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} USDT"
        payload = json.dumps({"invoice_id": internal_invoice_id, "type": "topup"})
        invoice = create_crypto_invoice(user_id, amount, description, payload)
        if not invoice:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ CryptoBot.")
            return
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π id –≤ –ë–î
        update_cryptobot_invoice_id(internal_invoice_id, invoice.get("invoice_id"))
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice.get('pay_url'))],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_payment_{internal_invoice_id}")],
            [InlineKeyboardButton("üîô –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ]
        await query.edit_message_text("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data['state'] = 'waiting_payment'
        return

    elif data.startswith("check_invoice_"):
        invoice_id = int(callback_data.split("_")[2])
        status = await check_cryptobot_invoice(invoice_id)
        if status == "paid":
            await context.bot.send_message(chat_id=user_id, text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            await deliver_config(query, context, plan_id, plan_name, user_id, country)
        else:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.")


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ RUB CrystalPay –î–û–õ–ñ–ù–ê –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –æ–±—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ topup_crystal_
    if data.startswith("topup_crystal_rub_"):
        parts = data.split('_')
        try:
            rub_amount = int(parts[3])
            internal_invoice_id = parts[4]
        except Exception:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è CrystalPay (RUB).")
            return
        crystal = create_crystal_pay_invoice_rub(user_id, rub_amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {rub_amount} RUB", internal_invoice_id)
        if not crystal or crystal.get("error"):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ CrystalPay (RUB).")
            return
        if crystal.get("crystal_id"):
            update_crystal_pay_id(internal_invoice_id, crystal["crystal_id"])
        keyboard = [
            [InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∏—Ç—å", url=crystal.get('url', ''))],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_crystal_topup_{internal_invoice_id}")],
            [InlineKeyboardButton("üîô –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ]
        await query.edit_message_text(
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã (RUB) —á–µ—Ä–µ–∑ CrystalPay:\n{crystal.get('url')}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['state'] = 'waiting_payment'
        return

    if data.startswith("topup_crystal_"):
        parts = data.split("_")
        # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç topup_crystal_{usdt_amount}
        try:
            amount = float(parts[-1])
        except Exception:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è CrystalPay.")
            return
        internal_invoice_id = create_payment(user_id, 'topup', None, amount)
        description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} USDT"
        # –≤–∞–∂–Ω–æ–µ: CrystalPay —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ RUB. –°–æ–∑–¥–∞—ë–º —Å—á—ë—Ç –≤ RUB –ø–æ –∫—É—Ä—Å—É
        rub_amount = int(round(amount * RUB_PER_USDT))
        crystal_invoice = create_crystal_pay_invoice_rub(user_id, rub_amount, description, internal_invoice_id)
        if not crystal_invoice or crystal_invoice.get("error"):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞ CrystalPay (RUB).")
            return
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º crystal id –≤ –ë–î
        if crystal_invoice.get("crystal_id"):
            update_crystal_pay_id(internal_invoice_id, crystal_invoice.get("crystal_id"))
        keyboard = [
            [InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∏—Ç—å", url=crystal_invoice.get('url', ''))],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_crystal_topup_{internal_invoice_id}")],
            [InlineKeyboardButton("üîô –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ]
        await query.edit_message_text(
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CrystalPay (RUB):\n{crystal_invoice.get('url')}\n\n–ö –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: ~{amount:.2f} USDT",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['state'] = 'waiting_payment'
        return

    # –≤—ã–±–æ—Ä USD –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

    if data.startswith("topup_rub_amount_"):
        rub_amount = int(data.split('_')[3])
        usdt_amount = rub_to_usdt(rub_amount)
        internal_invoice_id = create_payment(user_id, 'topup', None, usdt_amount)
        description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {rub_amount} RUB (~{usdt_amount} USDT)"
        # –î–ª—è CryptoBot –ø–ª–∞—Ç—ë–∂ –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç –≤ USDT, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–∞ —Å–ø–æ—Å–æ–±–∞
        keyboard = [
            [InlineKeyboardButton("ü§ñ CryptoBot (USDT)", callback_data=f"topup_crypto_{usdt_amount}")],
            [InlineKeyboardButton("üíé CrystalPAY (RUB)", callback_data=f"topup_crystal_rub_{rub_amount}_{internal_invoice_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="topup_rub")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–°—É–º–º–∞: {rub_amount} RUB (–∑–∞—á–∏—Å–ª–∏–º ~{usdt_amount} USDT).\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",
            reply_markup=reply_markup
        )
        return

    if data.startswith("topup_crystal_rub_"):
        parts = data.split('_')
        rub_amount = int(parts[3])
        internal_invoice_id = parts[4]
        # —Å–æ–∑–¥–∞–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á—ë—Ç –≤ CrystalPay –≤ —Ä—É–±–ª—è—Ö: –∏—Å–ø–æ–ª—å–∑—É–µ–º amount –∫–∞–∫ —Ü–µ–ª–æ–µ RUB
        crystal = create_crystal_pay_invoice_rub(user_id, rub_amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {rub_amount} RUB", internal_invoice_id)
        if not crystal or crystal.get("error"):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ CrystalPay (RUB).")
            return
        if crystal.get("crystal_id"):
            update_crystal_pay_id(internal_invoice_id, crystal["crystal_id"])
        await query.edit_message_text(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã (RUB) —á–µ—Ä–µ–∑ CrystalPay:\n{crystal.get('url')}")
        context.user_data['state'] = 'waiting_payment'
        return

    if data.startswith("topup_amount_"):
        amount = int(data.split('_')[2])
        keyboard = [
            [InlineKeyboardButton("üí∞ CryptoBot", callback_data=f"topup_crypto_{amount}")],
            [InlineKeyboardButton("üíé CrystalPAY", callback_data=f"topup_crystal_{amount}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="topup")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} USDT\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=reply_markup)
        return
    
    if data == "topup_rub_custom":
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 50 –¥–æ 100000):")
        context.user_data['state'] = 'waiting_topup_rub_amount'
        return
    
    if data == "help":
        help_text = (
            "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n"
            "üîê <b>–ö–∞–∫ –∫—É–ø–∏—Ç—å VPN:</b>\n"
            "1) –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç 1 USDT (—á–µ—Ä–µ–∑ CryptoBot –∏–ª–∏ CrystalPay).\n"
            "2) –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ —Å—Ç—Ä–∞–Ω—É.\n"
            "3) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É ‚Äî —Å—É–º–º–∞ —Å–ø–∏—à–µ—Ç—Å—è —Å –±–∞–ª–∞–Ω—Å–∞.\n\n"
            "üåç <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN</b>\n\n"
            "‚Äî <b>Android / iOS</b> —á–µ—Ä–µ–∑ V2RayTun\n"
            "  1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayTun –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.\n"
            "  2) –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –≤ —Ä–∞–∑–¥–µ–ª–µ –ú–æ–∏ VPN –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏.\n"
            "  3) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ñ–∏–≥–∞ —Ü–µ–ª–∏–∫–æ–º.\n"
            "  4) –í V2RayTun –Ω–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª.\n"
            "  5) –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª.\n\n"
            "‚Äî <b>Windows / macOS / Linux</b> —á–µ—Ä–µ–∑ Hiddify\n"
            "  1) –°–∫–∞—á–∞–π—Ç–µ Hiddify Client —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ (hiddify.com).\n"
            "  2) –û—Ç–∫—Ä–æ–π—Ç–µ –∫–ª–∏–µ–Ω—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª.\n"
            "  3) –í—Å—Ç–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ñ–∏–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.\n"
            "  4) –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</b>\n"
            "‚Äî –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª–µ–π, –æ—Ç–∫–ª—é—á–∞–π—Ç–µ –æ–¥–∏–Ω –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –¥—Ä—É–≥–æ–≥–æ.\n"
            "‚Äî –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É.\n"
            "‚Äî –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥—Ä—É–≥–∏–µ VPN –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\n"
            "üìã <b><a href='https://teletype.in/@ecliptvpn/Zw_fLfMQHWb'>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a></b>\n"
            "üìã <b><a href='https://teletype.in/@ecliptvpn/Zw_fLfMQHWb'>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a></b>\n\n"
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @xacan_1337\n"
        )
        keyboard = [[InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data="menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        return
    
    # –ê–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏
    if data == "admin_upload":
        if user_id != ADMIN_ID:
            return
        upload_text = "üì§ *–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:"
        await query.edit_message_text(upload_text, reply_markup=get_countries_keyboard("admin"), parse_mode=ParseMode.MARKDOWN)
        context.user_data['state'] = 'admin_select_country_upload'
        return
    
    if data.startswith("country_") and context.user_data.get('state') == 'admin_select_country_upload':
        country = data.split('_')[1]
        plan_text = "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
        plans = get_plans()
        keyboard = []
        for plan in plans:
            keyboard.append([InlineKeyboardButton(f"{plan[1]} ({plan[3]} USDT)", callback_data=f"admin_upload_plan_{plan[0]}_{country}")])
        keyboard.append([InlineKeyboardButton("üîô –ê–¥–º–∏–Ω", callback_data="admin")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(plan_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return
    
    if data.startswith("admin_upload_plan_"):
        parts = data.split('_')
        plan_id = int(parts[3])
        country = parts[4]
        context.user_data['uploading_plan'] = plan_id
        context.user_data['uploading_country'] = country
        upload_text = (
            f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è {COUNTRIES[country]} | {get_plan_by_id(plan_id)[1]}\n\n"
            "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)."
        )
        await query.edit_message_text(upload_text, parse_mode=ParseMode.MARKDOWN)
        return
    
    if data == "admin_stats":
        if user_id != ADMIN_ID:
            return
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        users_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM orders WHERE expiry_date > CURRENT_TIMESTAMP")
        active_orders = cursor.fetchone()[0]
        cursor.execute("SELECT SUM(amount) FROM payments WHERE status = 'paid'")
        total_revenue = cursor.fetchone()[0] or 0
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        cursor.execute("SELECT COUNT(*) FROM promo_activations")
        promo_used = cursor.fetchone()[0]
        # –°—É–º–º–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥—ã
        cursor.execute("SELECT SUM(p.amount) FROM promo_activations a JOIN promo_codes p ON a.code = p.code")
        promo_bonus = cursor.fetchone()[0] or 0
        # –°—É–º–º–∞ –≤—Ä—É—á–Ω—É—é –≤—ã–¥–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ (—á–µ—Ä–µ–∑ admin_grant_balance)
        # (–Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã, —Å—á–∏—Ç–∞–µ–º –ø–æ payments —Å type='grant', –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ, –∏–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
        # stats_text
        conn.close()
        stats_text = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{users_count}*\n"
            f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö VPN: *{active_orders}*\n"
            f"üí∞ –î–æ—Ö–æ–¥: *{total_revenue:.2f} USDT*\n"
            f"üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: *{promo_used}*\n"
            f"üí∏ –í—ã–¥–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤ (–ø—Ä–æ–º–æ–∫–æ–¥—ã): *{promo_bonus:.2f} USDT*"
        )
        keyboard = [[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω", callback_data="admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return
    
    if data == "admin_configs":
        if user_id != ADMIN_ID:
            return
        stats = get_configs_stats()
        if not stats:
            configs_text = "üîç *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏*\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤."
        else:
            configs_text = "üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏*\n\n"
            for stat in stats:
                plan_name, country_code, count = stat
                country_name = COUNTRIES.get(country_code, 'üåç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                configs_text += f"üì¶ {plan_name} | {country_name}: *{count}*\n"
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω", callback_data="admin")]])
        await query.edit_message_text(configs_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return
    
    if data in ["admin_users", "admin_payments"]:
        await query.edit_message_text("üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=[[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω", callback_data="admin")]])
        return
    
    if data.startswith("country_") and 'selected_plan' in context.user_data:
        await country_selected(update, context)
        return
    
    if data.startswith("buy_balance_"):
        await buy_with_balance(update, context)
        return
    
    if data.startswith("check_payment_"):
        await check_payment(update, context)
        return

    if data.startswith("check_crystal_topup_"):
        try:
            internal_invoice_id = data.replace("check_crystal_topup_", "", 1)
        except Exception:
            await query.edit_message_text("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await check_crystal_topup_status(update, context, internal_invoice_id)
        return

    if data.startswith("plan_"):
        await plan_selected(update, context)
        return

    if data == "promo":
        promo_text = (
            "üéÅ *–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
            "–ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑."
        )
        keyboard = [[InlineKeyboardButton("üîô –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(promo_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        context.user_data['state'] = 'waiting_promo'
        return

    if data == "admin_promos":
        if user_id != ADMIN_ID:
            return
        promo_menu = (
            "üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥—ã*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_create_promo")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="admin_list_promos")],
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω", callback_data="admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(promo_menu, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return
    if data == "admin_create_promo":
        if user_id != ADMIN_ID:
            return
        text = (
            "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: –ö–û–î –°–£–ú–ú–ê –ú–ê–ö–°\\_–ê–ö–¢–ò–í–ê–¶–ò–ô\(–∏–ª–∏ 0\) –î–ù–ï–ô\(–∏–ª–∏ 0, –µ—Å–ª–∏ –±–µ–∑ —Å—Ä–æ–∫–∞\)\n"
            "–ü—Ä–∏–º–µ—Ä: `SUMMER2025 5 10 30`"
        )
        keyboard = [[InlineKeyboardButton("üîô –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
        context.user_data['state'] = 'waiting_create_promo'
        return
    if data == "admin_grant_balance":
        if user_id != ADMIN_ID:
            return
        grant_text = (
            "üí∏ *–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 10):"
        )
        keyboard = [[InlineKeyboardButton("üîô –ê–¥–º–∏–Ω", callback_data="admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(grant_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        context.user_data['state'] = 'waiting_grant_id'
        return

    if data == "admin_list_promos":
        if user_id != ADMIN_ID:
            return
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT code, amount, max_activations, used_activations, expires_at, is_active FROM promo_codes ORDER BY code")
        promos = cursor.fetchall()
        conn.close()
        if not promos:
            text = "–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."
            keyboard = [[InlineKeyboardButton("üîô –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            return
        text = "üìã *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:" 
        keyboard = []
        for p in promos:
            code, amount, max_a, used_a, expires, active = p
            max_a = max_a if max_a is not None else '‚àû'
            expires = expires[:10] if expires else '‚àû'
            status = '‚úÖ' if active else '‚ùå'
            text += f"\n{status} `{code}` | {amount} USDT | {used_a}/{max_a} | –¥–æ {expires}"
            row = [
                InlineKeyboardButton("‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if active else "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_deactivate_promo_{code}"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_promo_{code}")
            ]
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("üîô –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return
    if data.startswith("admin_deactivate_promo_"):
        if user_id != ADMIN_ID:
            return
        code = data.replace("admin_deactivate_promo_", "")
        promo = get_promo_code(code)
        if not promo:
            await query.edit_message_text("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if promo[5]:
            deactivate_promo_code(code)
            await query.edit_message_text(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ `{code}` –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", parse_mode=ParseMode.MARKDOWN)
        else:
            # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
            conn = sqlite3.connect('vpn_bot.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE promo_codes SET is_active = 1 WHERE code = ?", (code,))
            conn.commit()
            conn.close()
            await query.edit_message_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ `{code}` –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", parse_mode=ParseMode.MARKDOWN)
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
        await button_callback(update, context)
        return
    if data.startswith("admin_delete_promo_"):
        if user_id != ADMIN_ID:
            return
        code = data.replace("admin_delete_promo_", "")
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ `{code}`? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"admin_confirm_delete_promo_{code}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_list_promos")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return
    if data.startswith("admin_confirm_delete_promo_"):
        if user_id != ADMIN_ID:
            return
        code = data.replace("admin_confirm_delete_promo_", "")
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM promo_activations WHERE code = ?", (code,))
        cursor.execute("DELETE FROM promo_codes WHERE code = ?", (code,))
        conn.commit()
        conn.close()
        await query.edit_message_text(f"üóëÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ `{code}` —É–¥–∞–ª—ë–Ω.", parse_mode=ParseMode.MARKDOWN)
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
        await button_callback(update, context)
        return

    if data.startswith("pay_crystal_"):
        parts = data.split('_')
        plan_id = int(parts[2])
        country = parts[3]
        await process_crystal_pay_payment(update, context, plan_id, country)
        return

    if data.startswith("check_crystal_"):
        internal_invoice_id = data.split('_')[2]
        await check_crystal_pay_payment_status(update, context, internal_invoice_id)
        return

    if data.startswith("pay_stars_"):
        # –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ —á–µ—Ä–µ–∑ Stars
        parts = data.split('_')
        plan_id = int(parts[2])
        country = parts[3]
        plan = get_plan_by_id(plan_id)
        if not plan:
            await query.edit_message_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –≤ –∑–≤—ë–∑–¥–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –∫—É—Ä—Å—É
        stars_amount = STARS_PRICE_BY_PLAN.get(plan_id)
        if stars_amount is None:
            amount_usdt = plan[3]
            stars_amount = max(1, int(round(amount_usdt * STARS_PER_USDT)))
        title = "–û–ø–ª–∞—Ç–∞ VPN –∑–≤—ë–∑–¥–∞–º–∏"
        description = f"{plan[1]} | {COUNTRIES.get(country, country)} ‚Äî {stars_amount}‚≠ê"
        payload = json.dumps({"type": "stars_purchase", "plan_id": plan_id, "country": country})
        try:
            await send_stars_invoice(context, query.message.chat_id, title, description, payload, stars_amount)
            await query.edit_message_text("‚è≥ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤—ë–∑–¥–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.")
        except Exception as e:
            logger.error(f"Stars invoice error for user {user_id}, plan {plan_id}: {e}")
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –≤ Stars. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω Telegram Stars –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'state' not in context.user_data:
        return
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
    if user_id != ADMIN_ID:
        is_subscribed = await check_channel_subscription(context.bot, user_id)
        if not is_subscribed:
            text, keyboard = get_subscription_required_menu()
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'subscription_required'
        return
    
    state = context.user_data['state']
    if state == 'waiting_topup_rub_amount':
        try:
            rub_amount = int(float(update.message.text))
            if rub_amount < 50 or rub_amount > 100000:
                await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 50 –¥–æ 100000 RUB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            usdt_amount = rub_to_usdt(rub_amount)
            internal_invoice_id = create_payment(user_id, 'topup', None, usdt_amount)

            keyboard = [
                [InlineKeyboardButton("ü§ñ CryptoBot (USDT)", callback_data=f"topup_crypto_{usdt_amount}")],
                [InlineKeyboardButton("üíé CrystalPAY (RUB)", callback_data=f"topup_crystal_rub_{rub_amount}_{internal_invoice_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="topup")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–°—É–º–º–∞: {rub_amount} RUB (–∑–∞—á–∏—Å–ª–∏–º ~{usdt_amount} USDT).\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",
                reply_markup=reply_markup
            )
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    if state == 'waiting_stars_amount':
        try:
            stars_amount = int(update.message.text.strip())
            if stars_amount < 1:
                await update.message.reply_text("–ú–∏–Ω–∏–º—É–º 1 ‚≠ê. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            title = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–≤—ë–∑–¥–∞–º–∏"
            description = f"–ö—É—Ä—Å: 1 USDT = {STARS_PER_USDT:.2f} ‚≠ê"
            payload = json.dumps({"type": "stars_topup"})
            await send_stars_invoice(context, update.message.chat_id, title, description, payload, stars_amount)
            context.user_data['state'] = 'waiting_payment_stars'
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚≠ê.")
        return

    if state == 'waiting_promo':
        code = update.message.text.strip()
        user_id = update.effective_user.id
        promo = get_promo_code(code)
        if not promo:
            await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if not promo[5]:  # is_active
            await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
            return
        if promo[4]:  # expires_at
            try:
                from datetime import datetime
                expires = datetime.fromisoformat(promo[4])
                if expires < datetime.now():
                    await update.message.reply_text("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫.")
                    return
            except Exception:
                pass
        if promo[2] is not None and promo[3] >= promo[2]:  # used_activations >= max_activations
            await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑.")
            return
        if is_promo_activated_by_user(code, user_id):
            await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
            return
        # –í—Å—ë –æ–∫, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
        activate_promo_code(code, user_id)
        update_balance(user_id, promo[1])
        credited_str = escape_markdown(f"{promo[1]:.2f}")
        await update.message.reply_text(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {credited_str} USDT.")
        context.user_data['state'] = 'menu'
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        balance = get_balance(user_id)
        username = escape_markdown(update.effective_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω')
        first_name = escape_markdown(update.effective_user.first_name)
        balance_str = escape_markdown(f"{balance:.2f}")
        profile_text = (
            f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"üÜî ID: `{user_id}`\n"
            f"üëª –ò–º—è: {first_name}\n"
            f"üìõ Username: @{username}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: *{balance_str} USDT*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        reply_markup = get_profile_menu()
        await update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
        return

    if state == 'waiting_grant_id':
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        try:
            parts = update.message.text.strip().split()
            if len(parts) != 2:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 10)")
                return
            target_id = int(parts[0])
            amount = float(parts[1])
            update_balance(target_id, amount)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount:.2f} USDT.")
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            admin_text = "üîß *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*"
            reply_markup = get_admin_panel()
            await update.message.reply_text(admin_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'admin_menu'
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}\n–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    if state == 'waiting_create_promo':
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        try:
            parts = update.message.text.strip().split()
            if len(parts) < 2 or len(parts) > 4:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ö–û–î –°–£–ú–ú–ê –ú–ê–ö–°_–ê–ö–¢–ò–í–ê–¶–ò–ô(–∏–ª–∏ 0) –î–ù–ï–ô(–∏–ª–∏ 0, –µ—Å–ª–∏ –±–µ–∑ —Å—Ä–æ–∫–∞). –ü—Ä–∏–º–µ—Ä: SUMMER2025 5 10 30")
                return
            code = parts[0]
            amount = float(parts[1])
            max_activations = int(parts[2]) if int(parts[2]) > 0 else None
            days = int(parts[3]) if len(parts) > 3 else 0
            from datetime import datetime, timedelta
            expires_at = (datetime.now() + timedelta(days=days)).isoformat() if days > 0 else None
            create_promo_code(code, amount, max_activations, expires_at)
            await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω! –°—É–º–º–∞: {amount} USDT, –ú–∞–∫—Å: {max_activations or '‚àû'}, –°—Ä–æ–∫: {days if days > 0 else '‚àû'} –¥–Ω–µ–π.")
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            promo_menu = ("üéÅ *–ü—Ä–æ–º–æ–∫–æ–¥—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_create_promo")],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="admin_list_promos")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω", callback_data="admin")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(promo_menu, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'admin_menu'
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}\n–í–≤–µ–¥–∏—Ç–µ –ö–û–î –°–£–ú–ú–ê –ú–ê–ö–°_–ê–ö–¢–ò–í–ê–¶–ò–ô(–∏–ª–∏ 0) –î–ù–ï–ô(–∏–ª–∏ 0, –µ—Å–ª–∏ –±–µ–∑ —Å—Ä–æ–∫–∞). –ü—Ä–∏–º–µ—Ä: SUMMER2025 5 10 30")
        return

# –ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
async def show_plans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        plans = get_plans()
        user_id = update.callback_query.from_user.id if update.callback_query else update.effective_user.id
        balance = get_balance(user_id)
        text = (
            f"üõçÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ*\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *{balance:.2f} USDT*\n\n"
        )
        keyboard = []
        
        for plan in plans:
            can_afford = balance >= plan[3]
            status_emoji = "‚úÖ" if can_afford else "üí≥"
            button_text = f"{status_emoji} {plan[1]} | {plan[3]} USDT"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"plan_{plan[0]}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data="menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query = update.callback_query
        if query:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in show_plans: {e}")
        if update.callback_query:
            await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
async def plan_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        plan_id = int(query.data.split('_')[1])
        plan = get_plan_by_id(plan_id)
        
        if not plan:
            await query.edit_message_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        user_id = query.from_user.id
        balance = get_balance(user_id)
        can_afford = balance >= plan[3]
        
        confirmation_text = (
            f"üì¶ *{plan[1]}*\n\n"
            f"üí∞ –¶–µ–Ω–∞: *{plan[3]} USDT*\n"
            f"üí≥ –ë–∞–ª–∞–Ω—Å: *{balance:.2f} USDT*\n\n"
            f"üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:"
        )
        
        keyboard = get_countries_keyboard("plans")
        await query.edit_message_text(confirmation_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        context.user_data['selected_plan'] = plan_id
        context.user_data['can_afford'] = can_afford
    except Exception as e:
        logger.error(f"Error in plan_selected: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
async def country_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    country_code = query.data.split('_')[1]
    plan_id = context.user_data.get('selected_plan')
    plan = get_plan_by_id(plan_id)
    can_afford = context.user_data.get('can_afford', False)
    
    confirmation_text = (
        f"üåç *{COUNTRIES[country_code]}*\n"
        f"üì¶ *{plan[1]}*\n"
        f"üí∞ *{plan[3]} USDT*\n\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
    )
    
    keyboard = []
    if can_afford:
        keyboard.append([InlineKeyboardButton("üí≥ –° –±–∞–ª–∞–Ω—Å–∞", callback_data=f"buy_balance_{plan_id}_{country_code}")])
    keyboard.append([InlineKeyboardButton("üîô –¢–∞—Ä–∏—Ñ—ã", callback_data="plans")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(confirmation_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

# –ü–æ–∫—É–ø–∫–∞ —Å –±–∞–ª–∞–Ω—Å–∞
async def buy_with_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        parts = query.data.split('_')
        plan_id = int(parts[2])
        country = parts[3]
        plan = get_plan_by_id(plan_id)
        
        user_id = query.from_user.id
        balance = get_balance(user_id)
        if balance < plan[3]:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            return
        
        # –í—ã—á–µ—Å—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞
        update_balance(user_id, -plan[3])
        
        # –í—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
        config_data = get_unused_config(plan_id, country)
        if not config_data:
            await query.edit_message_text("‚ùå –ö–æ–Ω—Ñ–∏–≥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            await context.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–æ–Ω—Ñ–∏–≥–∏: {plan[1]} | {COUNTRIES[country]}")
            return
        
        config_id, config = config_data
        mark_config_as_used(config_id)
        create_order(user_id, plan_id, config_id, plan[2])
        
        config_escaped = escape_markdown(config)
        success_text = (
            f"üéâ *–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!*\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{get_balance(user_id):.2f} USDT*\n\n"
            f"üåç {COUNTRIES[country]}\n"
            f"üì¶ {plan[1]}\n\n"
            f"üîë *–ö–æ–Ω—Ñ–∏–≥:*\n"
            f"```{config_escaped}```"
        )
        
        await query.edit_message_text(success_text, parse_mode=ParseMode.MARKDOWN_V2)
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
        username = query.from_user.username or query.from_user.first_name
        await context.bot.send_message(
            ADMIN_ID,
            f"üÜï –ü–æ–∫—É–ø–∫–∞ —Å –±–∞–ª–∞–Ω—Å–∞!\nüë§ {username} (ID: {user_id})\nüì¶ {plan[1]}\nüåç {COUNTRIES[country]}\nüí∞ {plan[3]} USDT"
        )
    except Exception as e:
        logger.error(f"Error in buy_with_balance: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot
async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        parts = query.data.split('_')
        plan_id = int(parts[1])
        country = parts[2]
        plan = get_plan_by_id(plan_id)
        user_id = query.from_user.id
        amount = plan[3]
        
        invoice_id = create_payment(user_id, 'purchase', plan_id, amount)
        description = f"VPN {plan[1]} | {COUNTRIES[country]}"
        payload = json.dumps({"invoice_id": invoice_id, "type": "purchase", "country": country})
        
        invoice = create_cryptobot_invoice(user_id, amount, description, payload)
        if not invoice:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞.")
            return
        
        update_cryptobot_invoice_id(invoice_id, invoice["invoice_id"])
        
        pay_url = invoice["pay_url"]
        payment_text = (
            f"üí≥ *–û–ø–ª–∞—Ç–∞ VPN*\n\n"
            f"üì¶ {plan[1]}\n"
            f"üåç {COUNTRIES[country]}\n"
            f"üí∞ *{amount} USDT*\n\n"
            f"‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ"
        )
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_payment_{invoice_id}")],
            [InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(payment_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in process_payment: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        data = query.data
        prefix = "check_payment_"
        internal_invoice_id = data[len(prefix):] if data.startswith(prefix) else data
        logger.info(f"check_payment: raw_data={data}, parsed_internal_invoice_id={internal_invoice_id}")
        payment = get_payment(internal_invoice_id)
        if not payment:
            await query.edit_message_text("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        cb_invoice_id = payment[6]  # cryptobot_invoice_id
        payment_type = payment[2]
        user_id = payment[1]
        amount = payment[4]

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: invoice_id={internal_invoice_id}, type={payment_type}, status={payment[7]}, user_id={user_id}")

        if not cb_invoice_id:
            await query.edit_message_text("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ CryptoBot
        url = f"{CRYPTO_BOT_API_URL}/getInvoices"
        headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
        params = {"invoice_ids": cb_invoice_id}

        response = requests.get(url, headers=headers, params=params, timeout=10)
        if response.status_code != 200:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
            return

        result = response.json()
        if not result.get("ok") or not result["result"].get("items"):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        cb_invoice = result["result"]["items"][0]
        status = cb_invoice["status"]
        payload_data = json.loads(cb_invoice.get("payload", "{}"))
        if payload_data.get("invoice_id") != internal_invoice_id:
            await query.edit_message_text("‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–ª–∞—Ç–µ–∂–∞.")
            return

        update_payment_status(internal_invoice_id, status)

        if status == "paid":
            if payment_type == "topup":
                update_balance(user_id, amount)
                await query.edit_message_text(
                    f"üéâ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!\nüí∞ +{amount} USDT\nüí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{get_balance(user_id):.2f} USDT*",
                    parse_mode=ParseMode.MARKDOWN
                )
            elif payment_type == "purchase":
                country = payload_data.get("country", "de")
                plan_id = payment[3]
                plan_name = payment[10]
                await deliver_config(query, context, plan_id, plan_name, user_id, country)
            else:
                await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.")
            return
        elif status == "expired":
            await query.edit_message_text("‚è∞ –°—á—ë—Ç –∏—Å—Ç—ë–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
            return
        else:
            await query.edit_message_text("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å' –ø–æ–∑–∂–µ.")
            return
    except Exception as e:
        logger.error(f"Error in check_payment: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        
# –í—ã–¥–∞—á–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏
async def deliver_config(query, context, plan_id, plan_name, user_id, country):
    try:
        config_data = get_unused_config(plan_id, country)
        if not config_data:
            if hasattr(query, 'message'):
                await query.message.reply_text("‚ùå –ö–æ–Ω—Ñ–∏–≥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
            else:
                await query.reply_text("‚ùå –ö–æ–Ω—Ñ–∏–≥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
            await context.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–æ–Ω—Ñ–∏–≥–∏: {plan_name} | {COUNTRIES[country]}")
            return
        
        config_id, config = config_data
        mark_config_as_used(config_id)
        create_order(user_id, plan_id, config_id, get_plan_by_id(plan_id)[2])
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è Markdown
        config_escaped = escape_markdown(config)
        success_text = (
            f"üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
            f"üåç {COUNTRIES[country]}\n"
            f"üì¶ {plan_name}\n\n"
            f"üîë *–ö–æ–Ω—Ñ–∏–≥:*\n"
            f"\`\`\`{config_escaped}\`\`\`"
        )
        keyboard = [[InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data="menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if hasattr(query, 'edit_message_text'):
            try:
                await query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è user_id {user_id}: {e}")
                success_text_safe = (
                    f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                    f"üåç {COUNTRIES[country]}\n"
                    f"üì¶ {plan_name}\n\n"
                    f"üîë –ö–æ–Ω—Ñ–∏–≥:\n"
                    f"{config}"
                )
                await query.message.reply_text(success_text_safe, reply_markup=reply_markup)
        else:
            try:
                await query.reply_text(success_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è user_id {user_id}: {e}")
                success_text_safe = (
                    f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                    f"üåç {COUNTRIES[country]}\n"
                    f"üì¶ {plan_name}\n\n"
                    f"üîë –ö–æ–Ω—Ñ–∏–≥:\n"
                    f"{config}"
                )
                await query.reply_text(success_text_safe, reply_markup=reply_markup)
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
        username = query.from_user.username or query.from_user.first_name if hasattr(query, 'from_user') else context.chat_data.get('username', 'user')
        await context.bot.send_message(
            ADMIN_ID,
            f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüë§ {username} (ID: {user_id})\nüì¶ {plan_name}\nüåç {COUNTRIES[country]}"
        )
    except Exception as e:
        logger.error(f"Error in deliver_config: {e}")
        if hasattr(query, 'message'):
            await query.message.reply_text("–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥–∞.")
        else:
            await query.reply_text("–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /admin
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await update.message.reply_text("üîß *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*", reply_markup=get_admin_panel(), parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID or 'uploading_plan' not in context.user_data:
        return
    
    plan_id = context.user_data['uploading_plan']
    country = context.user_data.get('uploading_country', 'de')
    document = update.message.document
    
    if document.mime_type != 'application/json':
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª.")
        return
    
    try:
        file = await context.bot.get_file(document.file_id)
        file_content = await file.download_as_bytearray()
        configs = json.loads(file_content.decode('utf-8'))
        
        if isinstance(configs, str):
            configs = [configs]
        elif not isinstance(configs, list):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.")
            return
        
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        inserted = 0
        for config in configs:
            if isinstance(config, str) and config.startswith('vless://'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ñ–∏–≥–∞, –≤–∫–ª—é—á–∞—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ #
                cursor.execute("INSERT INTO configs (plan_id, country, config) VALUES (?, ?, ?)", (plan_id, country, config))
                inserted += 1
            else:
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: {config[:50]}...")
        
        conn.commit()
        conn.close()
        
        if inserted == 0:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç (–¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å vless://).")
        else:
            await update.message.reply_text(
                f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ *{inserted}* –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è {COUNTRIES[country]} | {get_plan_by_id(plan_id)[1]}.",
                parse_mode=ParseMode.MARKDOWN
            )
        del context.user_data['uploading_plan']
        del context.user_data['uploading_country']
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ JSON: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ JSON: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_document: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.")

# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ –∫–æ–¥—É
def get_promo_code(code):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT code, amount, max_activations, used_activations, expires_at, is_active FROM promo_codes WHERE code = ?", (code,))
    promo = cursor.fetchone()
    conn.close()
    return promo

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥
def is_promo_activated_by_user(code, user_id):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM promo_activations WHERE code = ? AND user_id = ?", (code, user_id))
    result = cursor.fetchone()
    conn.close()
    return result is not None

# –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def activate_promo_code(code, user_id):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO promo_activations (code, user_id) VALUES (?, ?)", (code, user_id))
    cursor.execute("UPDATE promo_codes SET used_activations = used_activations + 1 WHERE code = ?", (code,))
    conn.commit()
    conn.close()

# –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
def create_promo_code(code, amount, max_activations=None, expires_at=None):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO promo_codes (code, amount, max_activations, expires_at, is_active)
        VALUES (?, ?, ?, ?, 1)
    """, (code, amount, max_activations, expires_at))
    conn.commit()
    conn.close()

# –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
def deactivate_promo_code(code):
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE promo_codes SET is_active = 0 WHERE code = ?", (code,))
    conn.commit()
    conn.close()

async def send_stars_invoice(context: ContextTypes.DEFAULT_TYPE, chat_id: int, title: str, description: str, payload: str, stars_amount: int):
    prices = [LabeledPrice(label="XTR", amount=stars_amount)]
    await context.bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=description,
        payload=payload,
        provider_token="",
        currency="XTR",
        prices=prices
    )

async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    try:
        await query.answer(ok=True)
    except Exception as e:
        logger.error(f"PreCheckout error: {e}")
        await query.answer(ok=False, error_message="–ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sp = update.message.successful_payment
    if not sp:
        return
    currency = sp.currency
    total_amount = sp.total_amount  # –¥–ª—è Stars ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
    payload = sp.invoice_payload
    try:
        data = json.loads(payload)
    except Exception:
        data = {"type": "unknown"}
    user_id = update.effective_user.id
    if currency == "XTR":
        if data.get("type") == "stars_topup":
            credited_usdt = total_amount / STARS_PER_USDT
            update_balance(user_id, credited_usdt)
            await update.message.reply_text(
                f"üéâ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {credited_usdt:.2f} USDT –∑–∞ {total_amount}‚≠ê"
            )
            # –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            balance = get_balance(user_id)
            balance_str = escape_markdown(f"{balance:.2f}")
            profile_text = (
                f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
                f"üÜî ID: `{user_id}`\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: *{balance_str} USDT*\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            await update.message.reply_text(profile_text, reply_markup=get_profile_menu(), parse_mode=ParseMode.MARKDOWN_V2)
        elif data.get("type") == "stars_purchase":
            plan_id = int(data.get("plan_id"))
            country = data.get("country", "de")
            plan = get_plan_by_id(plan_id)
            if not plan:
                await update.message.reply_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            await deliver_config(update.message, context, plan_id, plan[1], user_id, country)
        else:
            await update.message.reply_text("–ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω.")
    else:
        await update.message.reply_text("–ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω.")
        
from telegram.ext import MessageHandler, filters

async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    payment = update.message.successful_payment
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª —á–µ—Ä–µ–∑ Stars: {payment.total_amount} {payment.currency}")
    await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    await deliver_config(query, context, plan_id, plan_name, user_id, country)
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, handle_successful_payment))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CrystalPAY
async def process_crystal_pay_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_id: int, country: str):
    try:
        query = update.callback_query
        plan = get_plan_by_id(plan_id)
        user_id = query.from_user.id
        amount = int(round(float(plan[3])))
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        invoice_id = create_payment(user_id, 'purchase', plan_id, amount)
        description = ""
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ CrystalPAY
        crystal_invoice = create_crystal_pay_invoice(user_id, amount, description)
        if not crystal_invoice or crystal_invoice.get("error"):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ –≤ CrystalPAY.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å ID –æ—Ç CrystalPAY
        if crystal_invoice.get("crystal_id"):
            update_crystal_pay_id(invoice_id, crystal_invoice["crystal_id"])
        
        payment_text = (
            f"üíé *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CrystalPAY*\n\n"
            f"üì¶ {plan[1]}\n"
            f"üåç {COUNTRIES[country]}\n"
            f"üí∞ *{amount} USDT*\n\n"
            f"‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"
        )
        
        keyboard = [
            [InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∏—Ç—å", url=crystal_invoice.get("url", ""))],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_crystal_{invoice_id}")],
            [InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(payment_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        
    except Exception as e:
        logger.error(f"Error in process_crystal_pay_payment: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ CrystalPAY
async def check_crystal_pay_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE, internal_invoice_id: str):
    try:
        query = update.callback_query
        payment = get_payment(internal_invoice_id)
        
        if not payment:
            await query.edit_message_text("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if payment[8] == "paid":  # status
            await query.edit_message_text("‚úÖ –ü–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º crystal_pay_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT crystal_pay_id FROM payments WHERE invoice_id = ?", (internal_invoice_id,))
        result = cursor.fetchone()
        conn.close()
        
        if not result or not result[0]:
            await query.edit_message_text("‚ùå ID –ø–ª–∞—Ç–µ–∂–∞ CrystalPAY –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        crystal_id = result[0]
        status = check_crystal_pay_payment(crystal_id)
        
        if status == "payed":
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
            update_payment_status(internal_invoice_id, "paid")
            plan_id = payment[3]
            country = 'de'
            plan = get_plan_by_id(plan_id)
            
            await deliver_config(query.message, context, plan_id, plan[1], payment[1], country)
            await query.edit_message_text("‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
            
        elif status == "notpayed":
            await query.edit_message_text("‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
        elif status == "overpayed":
            # –ü–µ—Ä–µ–ø–ª–∞—Ç–∞ - –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º
            update_payment_status(internal_invoice_id, "paid")
            plan_id = payment[3]
            country = 'de'
            plan = get_plan_by_id(plan_id)
            
            await deliver_config(query.message, context, plan_id, plan[1], payment[1], country)
            await query.edit_message_text("‚úÖ –ü–ª–∞—Ç—ë–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–ø–µ—Ä–µ–ø–ª–∞—Ç–∞)! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
            
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"Error checking CrystalPAY payment: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ CrystalPAY
async def process_crystal_topup(update: Update, context: ContextTypes.DEFAULT_TYPE, amount: float):
    try:
        query = update.callback_query
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        amount_int = int(round(float(amount)))
        invoice_id = create_payment(user_id, 'topup', None, amount_int)
        description = ""
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ CrystalPAY
        crystal_invoice = create_crystal_pay_invoice(user_id, amount_int, description)
        if not crystal_invoice or crystal_invoice.get("error"):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ –≤ CrystalPAY.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å ID –æ—Ç CrystalPAY
        if crystal_invoice.get("crystal_id"):
            update_crystal_pay_id(invoice_id, crystal_invoice["crystal_id"])
        
        payment_text = (
            f"üíé *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CrystalPAY*\n\n"
            f"üí∞ –°—É–º–º–∞: *{amount_int} USDT*\n\n"
            f"‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"
        )
        
        keyboard = [
            [InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∏—Ç—å", url=crystal_invoice.get("url", ""))],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_crystal_topup_{invoice_id}")],
            [InlineKeyboardButton("üîô –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(payment_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        
    except Exception as e:
        logger.error(f"Error in process_crystal_topup: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è CrystalPAY
async def check_crystal_topup_status(update: Update, context: ContextTypes.DEFAULT_TYPE, internal_invoice_id: str):
    try:
        query = update.callback_query
        payment = get_payment(internal_invoice_id)
        
        if not payment:
            await query.edit_message_text("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if payment[8] == "paid":  # status
            await query.edit_message_text("‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º crystal_pay_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT crystal_pay_id FROM payments WHERE invoice_id = ?", (internal_invoice_id,))
        result = cursor.fetchone()
        conn.close()
        
        if not result or not result[0]:
            await query.edit_message_text("‚ùå ID –ø–ª–∞—Ç–µ–∂–∞ CrystalPAY –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        crystal_id = result[0]
        status = check_crystal_pay_payment(crystal_id)
        
        if status in ["payed", "overpayed"]:
            # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
            update_payment_status(internal_invoice_id, "paid")
            amount = payment[4]  # amount
            user_id = payment[1]  # user_id
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            update_balance(user_id, amount)
            
            await query.edit_message_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} USDT!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            balance = get_balance(user_id)
            balance_str = escape_markdown(f"{balance:.2f}")
            profile_text = (
                f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
                f"üÜî ID: `{user_id}`\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: *{balance_str} USDT*\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            await query.message.reply_text(profile_text, reply_markup=get_profile_menu(), parse_mode=ParseMode.MARKDOWN_V2)
            
        elif status == "notpayed":
            await query.edit_message_text("‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"Error checking CrystalPAY topup: {e}")

        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")

if __name__ == "__main__":
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()
